SJCONF
sjconf
%%mtime

%!target : man
%!encoding : utf-8
%!postproc(man): "^(\.TH.*) 1 "  "\1 8 "

= NAME =

sjconf - system configuration wrapper

= DESCRIPTION =

sjconf is a configuration wrapper that handles global and server specific configuration, deployment and service restart.

sjconf in itself does not have any knowledge of configuration files and their settings, everything is done through the use of plugins.

sjconf is based on the concept of levels of configuration files:

  - The first level is the "base" directory. It contains one file per plugin. Deploying configuration with only this configuration *must* result in a configuration strictly equivalent to the program's default one. For example, a plugin configuring /etc/apt/sources.list must put only the one given by a default debian installation.

  - The other levels are the "profile" files. They are defined using the "profile-<level number>" configuration variables of the "sjconf" section in the "local.conf" file (see below). Each profile configuration file  must be provided by a unique sjconf-profile-<profile> package, which should install the file in the correct level and depend on the correct lower-level profile packages, if any. The rules are simple: each configuration file of a given level has precedence over all the lower levels (including "base"). For a given level, several configuration files can co-exist, provided they do not define a different value for the same configuration key. If there is a conflict, it must be resolved by defining the conflicting key in higher level configuration file.

  - The infinite level of configuration is the "local.conf" file. It is not and must not be provided by any debian package. This configuration file is the local host specific configuration. It contains for example the hostname of the computer. A configuration value in this file will overwrite the value defined in a any other configuration file.


A plugin will only be given configuration section that have either exactly the name of the plugin, or start with the plugin name and a colon, so be careful when you add a new section to name it correctly.

sjconf is based on templates, that is, the generated configuration file is generally a template file where variables have been substituted by their value in the configuration file. Be aware, however, that some magic may be done by sjconf or the plugin: some variables may be generated from the values. Do not trust the template to know which variables can be modified in the "local.conf" file, trust instead the plugin's documentation.

Note than using templates is not mandatory: plugins may as well generate the whole configuration file.

= OPTIONS =

When run without options, sjconf will output the content of the local.conf file.

== About sjconf ==

: **-h**, --**help**
Show a help message and exit.

: **-v**, --**version**
Print version and exit.


== sjconf behaviour ==

: **-v**, --**verbose**
Be verbose.

: **-q**, --**quiet**
Be quiet: nothing will be printed on stdout.


== sjconf editor ==

: **-e**, --**editor**,
Open local.conf in $EDITOR.


== sjconf information ==

: --**get** //<section>// //<key>//
Get a configuration key in "local.conf".

: --**list-plugins**
List installed plugins.

: --**list-profiles** //<profile>//
List installed profiles.


== sjconf commit ==

: --**save**
Save modification (mandatory to deploy).

: --**deploy**
Deploy configuration.

: --**no-backup**
Do not backup configuration files. To be used with --**deploy** option.


== sjconf modifiers ==

: --**set** //<section>// //<key>// //<value>//
Set a configuration key in "local.conf".

: --**add-to-list** //<section>// //<key>// //<value>//
Add a value to a configuration key, provided the key is of type "list" (see below).

: --**remove-from-list** //<section>// //<key>// //<value>//
Remove a value from a configuration key, provided the key is of type "list" (see below).

: --**add-to-sequence** //<section>// //<key>// //<value>//
Add a value to a configuration key, provided the key is of type "sequence" (see below).

: --**remove-from-sequence** //<section>// //<key>// //<value>//
Remove a value from a configuration key, provided the key is of type "sequence" (see below).

: --**delete-key** //<section>// //<key>//
Delete a key within a section.

: --**delete-section** //<section>//
Delete a complete section.


== sjconf diff ==

: --**diff**
Show "diff -u1" between old and new configuration files.


== sjconf extensions ==

: --**restart** //<plugin>// | //all//
Restart all services of "plugin". If "plugin" is "all", then restart all services of all plugins.

: --**reload** //<plugin>// | //all//
Reload all services of "plugin". If "plugin" is "all", then reload all services of all plugins.

: --**install-plugin** //<plugin>//
Install "plugin" into the plugins path.

: --**install-plugin-with-symlink** //<plugin>//
Install "plugin" into the plugins path by using a symbolic link.

: --**uninstall-plugin** //<plugin>//
Uninstall "plugin" from the plugins path.

: --**enable-plugin** //<plugin>//
Add "plugin" to the list of plugins to use.

: --**disable-plugin** //<plugin>//
Remove "plugin" from the list of plugins to use.

: --**install-template** //<template>//
Install "template" into the templates path.

: --**install-template-with-symlink** //<template>//
Install "template" into the templates path by using a symbolic link.

: --**uninstall-template** //<template>//
Uninstall "plugin" from the templates path.

: --**install-conf** //<conf>//
Install "conf" into the "base" configuration directory.

: --**install-conf-with-symlink** //<conf>//
Install "conf" into the "base" configuration directory by using a symbolic link.

: --**uninstall-conf** //<conf>//
Uninstall "conf" from the base.conf file, "conf" should be the basename of a conf file previously installed.

: --**install-profile** //<profile>//
Install "profile" file into the configuration directory.

: --**install-profile-with-symlink** //<profile>//
Install "profile" file into the configuration directory by using a symbolic link.

: --**uninstall-profile** //<profile>//
Uninstall "profile" file, "profile" should be the basename of a profile file previously installed.

: --**enable-profile** //<profile> <level>//
Enable the profile "profile" at level "level".

: --**disable-profile** //<profile>//
Disable the profile "profile".



= TYPES =

sjconf has an internal system for handling configuration option types. That is, provided the plugins handles it, sjconf can convert the string value to an internal Python object, thus allowing easy transformations.

To know if a configuration option is of a specific type, please read the manual page of the plugin.

== BOOL ==

The **bool** type converts values to/from boolean.

The following value are converted to //true//.

  //yes//, //on//, //true//, //enabled//, //enable//

The following value are converted to //false//.

  //"no//, //off//, //false//, //disabled//, //disable//

== SIZE ==

The **size** type converts values to integer. The value must be of the form //<number><suffix>//, where suffix must be one of:

  //k//, //M//, //G//, //T//

== LIST ==

The list type converts comma separated list. Spaces around commas are automatically removed.

There exists convenient options to deal with the list type from a user's point of view, see the OPTIONS section above.

== SEQUENCE ==

The sequence type converts list spread over multiple options. If a key is typed sequence by a plugin, then all keys of the form //<key>-<number>// will be added to the list, sorted ascendently using //<number>//. The numbers need not to be succesive.

There exists convenient options to deal with the sequence type from a user's point of view, see the OPTIONS section above.

= AUTHOR =

The sjconf program and this manual page have been written by the **SmartJog** company.

= SEE ALSO =

%! generated by: find /usr/share/man -name "sjconf-*" | sed \
%! "s:/usr/share/man/man8/:**:;s:.8.gz:**(8):" | tr '\n' ',' | sed 's/,/, /g;s/..$/\n/'

**sjconf-libsjio**(8), **sjconf-hostname**(8), **sjconf-rbc2**(8), **sjconf-ffserver**(8), **sjconf-toolbox**(8), **sjconf-interfaces**(8), **sjconf-hosts**(8), **sjconf-sjtools**(8), **sjconf-sl2d**(8), **sjconf-proftpdsj**(8), **sjconf-sjeventsd**(8), **sjconf-lilo**(8), **sjconf-apache2**(8), **sjconf-intervpn**(8), **sjconf-multivpn**(8).

